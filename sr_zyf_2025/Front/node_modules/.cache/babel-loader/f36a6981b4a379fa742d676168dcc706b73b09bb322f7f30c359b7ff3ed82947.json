{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\";\nimport { ref, watch, computed, reactive, defineComponent } from \"vue\";\nimport { clamp, numericProp, preventDefault, createNamespace, makeRequiredProp, LONG_PRESS_START_TIME } from \"../utils/index.mjs\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { useTouch } from \"../composables/use-touch.mjs\";\nimport { raf, useEventListener, useRect } from \"@vant/use\";\nimport { Image } from \"../image/index.mjs\";\nimport { Loading } from \"../loading/index.mjs\";\nimport { SwipeItem } from \"../swipe-item/index.mjs\";\nconst getDistance = touches => Math.sqrt((touches[0].clientX - touches[1].clientX) ** 2 + (touches[0].clientY - touches[1].clientY) ** 2);\nconst getCenter = touches => ({\n  x: (touches[0].clientX + touches[1].clientX) / 2,\n  y: (touches[0].clientY + touches[1].clientY) / 2\n});\nconst bem = createNamespace(\"image-preview\")[1];\nconst longImageRatio = 2.6;\nconst imagePreviewItemProps = {\n  src: String,\n  show: Boolean,\n  active: Number,\n  minZoom: makeRequiredProp(numericProp),\n  maxZoom: makeRequiredProp(numericProp),\n  rootWidth: makeRequiredProp(Number),\n  rootHeight: makeRequiredProp(Number),\n  disableZoom: Boolean,\n  doubleScale: Boolean,\n  closeOnClickImage: Boolean,\n  closeOnClickOverlay: Boolean\n};\nvar stdin_default = defineComponent({\n  props: imagePreviewItemProps,\n  emits: [\"scale\", \"close\", \"longPress\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const state = reactive({\n      scale: 1,\n      moveX: 0,\n      moveY: 0,\n      moving: false,\n      zooming: false,\n      initializing: false,\n      imageRatio: 0\n    });\n    const touch = useTouch();\n    const imageRef = ref();\n    const swipeItem = ref();\n    const vertical = ref(false);\n    const isLongImage = ref(false);\n    let initialMoveY = 0;\n    const imageStyle = computed(() => {\n      const {\n        scale,\n        moveX,\n        moveY,\n        moving,\n        zooming,\n        initializing\n      } = state;\n      const style = {\n        transitionDuration: zooming || moving || initializing ? \"0s\" : \".3s\"\n      };\n      if (scale !== 1 || isLongImage.value) {\n        style.transform = `matrix(${scale}, 0, 0, ${scale}, ${moveX}, ${moveY})`;\n      }\n      return style;\n    });\n    const maxMoveX = computed(() => {\n      if (state.imageRatio) {\n        const {\n          rootWidth,\n          rootHeight\n        } = props;\n        const displayWidth = vertical.value ? rootHeight / state.imageRatio : rootWidth;\n        return Math.max(0, (state.scale * displayWidth - rootWidth) / 2);\n      }\n      return 0;\n    });\n    const maxMoveY = computed(() => {\n      if (state.imageRatio) {\n        const {\n          rootWidth,\n          rootHeight\n        } = props;\n        const displayHeight = vertical.value ? rootHeight : rootWidth * state.imageRatio;\n        return Math.max(0, (state.scale * displayHeight - rootHeight) / 2);\n      }\n      return 0;\n    });\n    const setScale = (scale, center) => {\n      var _a;\n      scale = clamp(scale, +props.minZoom, +props.maxZoom + 1);\n      if (scale !== state.scale) {\n        const ratio = scale / state.scale;\n        state.scale = scale;\n        if (center) {\n          const imageRect = useRect((_a = imageRef.value) == null ? void 0 : _a.$el);\n          const origin = {\n            x: imageRect.width * 0.5,\n            y: imageRect.height * 0.5\n          };\n          const moveX = state.moveX - (center.x - imageRect.left - origin.x) * (ratio - 1);\n          const moveY = state.moveY - (center.y - imageRect.top - origin.y) * (ratio - 1);\n          state.moveX = clamp(moveX, -maxMoveX.value, maxMoveX.value);\n          state.moveY = clamp(moveY, -maxMoveY.value, maxMoveY.value);\n        } else {\n          state.moveX = 0;\n          state.moveY = isLongImage.value ? initialMoveY : 0;\n        }\n        emit(\"scale\", {\n          scale,\n          index: props.active\n        });\n      }\n    };\n    const resetScale = () => {\n      setScale(1);\n    };\n    const toggleScale = () => {\n      const scale = state.scale > 1 ? 1 : 2;\n      setScale(scale, scale === 2 || isLongImage.value ? {\n        x: touch.startX.value,\n        y: touch.startY.value\n      } : void 0);\n    };\n    let fingerNum;\n    let startMoveX;\n    let startMoveY;\n    let startScale;\n    let startDistance;\n    let lastCenter;\n    let doubleTapTimer;\n    let touchStartTime;\n    let isImageMoved = false;\n    const onTouchStart = event => {\n      const {\n        touches\n      } = event;\n      fingerNum = touches.length;\n      if (fingerNum === 2 && props.disableZoom) {\n        return;\n      }\n      const {\n        offsetX\n      } = touch;\n      touch.start(event);\n      startMoveX = state.moveX;\n      startMoveY = state.moveY;\n      touchStartTime = Date.now();\n      isImageMoved = false;\n      state.moving = fingerNum === 1 && (state.scale !== 1 || isLongImage.value);\n      state.zooming = fingerNum === 2 && !offsetX.value;\n      if (state.zooming) {\n        startScale = state.scale;\n        startDistance = getDistance(touches);\n      }\n    };\n    const onTouchMove = event => {\n      const {\n        touches\n      } = event;\n      touch.move(event);\n      if (state.moving) {\n        const {\n          deltaX,\n          deltaY\n        } = touch;\n        const moveX = deltaX.value + startMoveX;\n        const moveY = deltaY.value + startMoveY;\n        if ((moveX > maxMoveX.value || moveX < -maxMoveX.value) && !isImageMoved && touch.isHorizontal()) {\n          state.moving = false;\n          return;\n        }\n        isImageMoved = true;\n        preventDefault(event, true);\n        state.moveX = clamp(moveX, -maxMoveX.value, maxMoveX.value);\n        state.moveY = clamp(moveY, -maxMoveY.value, maxMoveY.value);\n      }\n      if (state.zooming) {\n        preventDefault(event, true);\n        if (touches.length === 2) {\n          const distance = getDistance(touches);\n          const scale = startScale * distance / startDistance;\n          lastCenter = getCenter(touches);\n          setScale(scale, lastCenter);\n        }\n      }\n    };\n    const checkClose = event => {\n      var _a;\n      const swipeItemEl = (_a = swipeItem.value) == null ? void 0 : _a.$el;\n      const imageEl = swipeItemEl.firstElementChild;\n      const isClickOverlay = event.target === swipeItemEl;\n      const isClickImage = imageEl == null ? void 0 : imageEl.contains(event.target);\n      if (!props.closeOnClickImage && isClickImage) return;\n      if (!props.closeOnClickOverlay && isClickOverlay) return;\n      emit(\"close\");\n    };\n    const checkTap = event => {\n      if (fingerNum > 1) {\n        return;\n      }\n      const deltaTime = Date.now() - touchStartTime;\n      const TAP_TIME = 250;\n      if (touch.isTap.value) {\n        if (deltaTime < TAP_TIME) {\n          if (props.doubleScale) {\n            if (doubleTapTimer) {\n              clearTimeout(doubleTapTimer);\n              doubleTapTimer = null;\n              toggleScale();\n            } else {\n              doubleTapTimer = setTimeout(() => {\n                checkClose(event);\n                doubleTapTimer = null;\n              }, TAP_TIME);\n            }\n          } else {\n            checkClose(event);\n          }\n        } else if (deltaTime > LONG_PRESS_START_TIME) {\n          emit(\"longPress\");\n        }\n      }\n    };\n    const onTouchEnd = event => {\n      let stopPropagation = false;\n      if (state.moving || state.zooming) {\n        stopPropagation = true;\n        if (state.moving && startMoveX === state.moveX && startMoveY === state.moveY) {\n          stopPropagation = false;\n        }\n        if (!event.touches.length) {\n          if (state.zooming) {\n            state.moveX = clamp(state.moveX, -maxMoveX.value, maxMoveX.value);\n            state.moveY = clamp(state.moveY, -maxMoveY.value, maxMoveY.value);\n            state.zooming = false;\n          }\n          state.moving = false;\n          startMoveX = 0;\n          startMoveY = 0;\n          startScale = 1;\n          if (state.scale < 1) {\n            resetScale();\n          }\n          const maxZoom = +props.maxZoom;\n          if (state.scale > maxZoom) {\n            setScale(maxZoom, lastCenter);\n          }\n        }\n      }\n      preventDefault(event, stopPropagation);\n      checkTap(event);\n      touch.reset();\n    };\n    const resize = () => {\n      const {\n        rootWidth,\n        rootHeight\n      } = props;\n      const rootRatio = rootHeight / rootWidth;\n      const {\n        imageRatio\n      } = state;\n      vertical.value = state.imageRatio > rootRatio && imageRatio < longImageRatio;\n      isLongImage.value = state.imageRatio > rootRatio && imageRatio >= longImageRatio;\n      if (isLongImage.value) {\n        initialMoveY = (imageRatio * rootWidth - rootHeight) / 2;\n        state.moveY = initialMoveY;\n        state.initializing = true;\n        raf(() => {\n          state.initializing = false;\n        });\n      }\n      resetScale();\n    };\n    const onLoad = event => {\n      const {\n        naturalWidth,\n        naturalHeight\n      } = event.target;\n      state.imageRatio = naturalHeight / naturalWidth;\n      resize();\n    };\n    watch(() => props.active, resetScale);\n    watch(() => props.show, value => {\n      if (!value) {\n        resetScale();\n      }\n    });\n    watch(() => [props.rootWidth, props.rootHeight], resize);\n    useEventListener(\"touchmove\", onTouchMove, {\n      target: computed(() => {\n        var _a;\n        return (_a = swipeItem.value) == null ? void 0 : _a.$el;\n      })\n    });\n    useExpose({\n      resetScale\n    });\n    return () => {\n      const imageSlots = {\n        loading: () => _createVNode(Loading, {\n          \"type\": \"spinner\"\n        }, null)\n      };\n      return _createVNode(SwipeItem, {\n        \"ref\": swipeItem,\n        \"class\": bem(\"swipe-item\"),\n        \"onTouchstartPassive\": onTouchStart,\n        \"onTouchend\": onTouchEnd,\n        \"onTouchcancel\": onTouchEnd\n      }, {\n        default: () => [slots.image ? _createVNode(\"div\", {\n          \"class\": bem(\"image-wrap\")\n        }, [slots.image({\n          src: props.src\n        })]) : _createVNode(Image, {\n          \"ref\": imageRef,\n          \"src\": props.src,\n          \"fit\": \"contain\",\n          \"class\": bem(\"image\", {\n            vertical: vertical.value\n          }),\n          \"style\": imageStyle.value,\n          \"onLoad\": onLoad\n        }, imageSlots)]\n      });\n    };\n  }\n});\nexport { stdin_default as default };","map":{"version":3,"names":["createVNode","_createVNode","ref","watch","computed","reactive","defineComponent","clamp","numericProp","preventDefault","createNamespace","makeRequiredProp","LONG_PRESS_START_TIME","useExpose","useTouch","raf","useEventListener","useRect","Image","Loading","SwipeItem","getDistance","touches","Math","sqrt","clientX","clientY","getCenter","x","y","bem","longImageRatio","imagePreviewItemProps","src","String","show","Boolean","active","Number","minZoom","maxZoom","rootWidth","rootHeight","disableZoom","doubleScale","closeOnClickImage","closeOnClickOverlay","stdin_default","props","emits","setup","emit","slots","state","scale","moveX","moveY","moving","zooming","initializing","imageRatio","touch","imageRef","swipeItem","vertical","isLongImage","initialMoveY","imageStyle","style","transitionDuration","value","transform","maxMoveX","displayWidth","max","maxMoveY","displayHeight","setScale","center","_a","ratio","imageRect","$el","origin","width","height","left","top","index","resetScale","toggleScale","startX","startY","fingerNum","startMoveX","startMoveY","startScale","startDistance","lastCenter","doubleTapTimer","touchStartTime","isImageMoved","onTouchStart","event","length","offsetX","start","Date","now","onTouchMove","move","deltaX","deltaY","isHorizontal","distance","checkClose","swipeItemEl","imageEl","firstElementChild","isClickOverlay","target","isClickImage","contains","checkTap","deltaTime","TAP_TIME","isTap","clearTimeout","setTimeout","onTouchEnd","stopPropagation","reset","resize","rootRatio","onLoad","naturalWidth","naturalHeight","imageSlots","loading","default","image"],"sources":["/Users/jiezhou/IdeaProjects/graduaction/sr_RemoteDoctor_2025/Front/node_modules/vant/es/image-preview/ImagePreviewItem.mjs"],"sourcesContent":["import { createVNode as _createVNode } from \"vue\";\nimport { ref, watch, computed, reactive, defineComponent } from \"vue\";\nimport { clamp, numericProp, preventDefault, createNamespace, makeRequiredProp, LONG_PRESS_START_TIME } from \"../utils/index.mjs\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { useTouch } from \"../composables/use-touch.mjs\";\nimport { raf, useEventListener, useRect } from \"@vant/use\";\nimport { Image } from \"../image/index.mjs\";\nimport { Loading } from \"../loading/index.mjs\";\nimport { SwipeItem } from \"../swipe-item/index.mjs\";\nconst getDistance = (touches) => Math.sqrt((touches[0].clientX - touches[1].clientX) ** 2 + (touches[0].clientY - touches[1].clientY) ** 2);\nconst getCenter = (touches) => ({\n  x: (touches[0].clientX + touches[1].clientX) / 2,\n  y: (touches[0].clientY + touches[1].clientY) / 2\n});\nconst bem = createNamespace(\"image-preview\")[1];\nconst longImageRatio = 2.6;\nconst imagePreviewItemProps = {\n  src: String,\n  show: Boolean,\n  active: Number,\n  minZoom: makeRequiredProp(numericProp),\n  maxZoom: makeRequiredProp(numericProp),\n  rootWidth: makeRequiredProp(Number),\n  rootHeight: makeRequiredProp(Number),\n  disableZoom: Boolean,\n  doubleScale: Boolean,\n  closeOnClickImage: Boolean,\n  closeOnClickOverlay: Boolean\n};\nvar stdin_default = defineComponent({\n  props: imagePreviewItemProps,\n  emits: [\"scale\", \"close\", \"longPress\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const state = reactive({\n      scale: 1,\n      moveX: 0,\n      moveY: 0,\n      moving: false,\n      zooming: false,\n      initializing: false,\n      imageRatio: 0\n    });\n    const touch = useTouch();\n    const imageRef = ref();\n    const swipeItem = ref();\n    const vertical = ref(false);\n    const isLongImage = ref(false);\n    let initialMoveY = 0;\n    const imageStyle = computed(() => {\n      const {\n        scale,\n        moveX,\n        moveY,\n        moving,\n        zooming,\n        initializing\n      } = state;\n      const style = {\n        transitionDuration: zooming || moving || initializing ? \"0s\" : \".3s\"\n      };\n      if (scale !== 1 || isLongImage.value) {\n        style.transform = `matrix(${scale}, 0, 0, ${scale}, ${moveX}, ${moveY})`;\n      }\n      return style;\n    });\n    const maxMoveX = computed(() => {\n      if (state.imageRatio) {\n        const {\n          rootWidth,\n          rootHeight\n        } = props;\n        const displayWidth = vertical.value ? rootHeight / state.imageRatio : rootWidth;\n        return Math.max(0, (state.scale * displayWidth - rootWidth) / 2);\n      }\n      return 0;\n    });\n    const maxMoveY = computed(() => {\n      if (state.imageRatio) {\n        const {\n          rootWidth,\n          rootHeight\n        } = props;\n        const displayHeight = vertical.value ? rootHeight : rootWidth * state.imageRatio;\n        return Math.max(0, (state.scale * displayHeight - rootHeight) / 2);\n      }\n      return 0;\n    });\n    const setScale = (scale, center) => {\n      var _a;\n      scale = clamp(scale, +props.minZoom, +props.maxZoom + 1);\n      if (scale !== state.scale) {\n        const ratio = scale / state.scale;\n        state.scale = scale;\n        if (center) {\n          const imageRect = useRect((_a = imageRef.value) == null ? void 0 : _a.$el);\n          const origin = {\n            x: imageRect.width * 0.5,\n            y: imageRect.height * 0.5\n          };\n          const moveX = state.moveX - (center.x - imageRect.left - origin.x) * (ratio - 1);\n          const moveY = state.moveY - (center.y - imageRect.top - origin.y) * (ratio - 1);\n          state.moveX = clamp(moveX, -maxMoveX.value, maxMoveX.value);\n          state.moveY = clamp(moveY, -maxMoveY.value, maxMoveY.value);\n        } else {\n          state.moveX = 0;\n          state.moveY = isLongImage.value ? initialMoveY : 0;\n        }\n        emit(\"scale\", {\n          scale,\n          index: props.active\n        });\n      }\n    };\n    const resetScale = () => {\n      setScale(1);\n    };\n    const toggleScale = () => {\n      const scale = state.scale > 1 ? 1 : 2;\n      setScale(scale, scale === 2 || isLongImage.value ? {\n        x: touch.startX.value,\n        y: touch.startY.value\n      } : void 0);\n    };\n    let fingerNum;\n    let startMoveX;\n    let startMoveY;\n    let startScale;\n    let startDistance;\n    let lastCenter;\n    let doubleTapTimer;\n    let touchStartTime;\n    let isImageMoved = false;\n    const onTouchStart = (event) => {\n      const {\n        touches\n      } = event;\n      fingerNum = touches.length;\n      if (fingerNum === 2 && props.disableZoom) {\n        return;\n      }\n      const {\n        offsetX\n      } = touch;\n      touch.start(event);\n      startMoveX = state.moveX;\n      startMoveY = state.moveY;\n      touchStartTime = Date.now();\n      isImageMoved = false;\n      state.moving = fingerNum === 1 && (state.scale !== 1 || isLongImage.value);\n      state.zooming = fingerNum === 2 && !offsetX.value;\n      if (state.zooming) {\n        startScale = state.scale;\n        startDistance = getDistance(touches);\n      }\n    };\n    const onTouchMove = (event) => {\n      const {\n        touches\n      } = event;\n      touch.move(event);\n      if (state.moving) {\n        const {\n          deltaX,\n          deltaY\n        } = touch;\n        const moveX = deltaX.value + startMoveX;\n        const moveY = deltaY.value + startMoveY;\n        if ((moveX > maxMoveX.value || moveX < -maxMoveX.value) && !isImageMoved && touch.isHorizontal()) {\n          state.moving = false;\n          return;\n        }\n        isImageMoved = true;\n        preventDefault(event, true);\n        state.moveX = clamp(moveX, -maxMoveX.value, maxMoveX.value);\n        state.moveY = clamp(moveY, -maxMoveY.value, maxMoveY.value);\n      }\n      if (state.zooming) {\n        preventDefault(event, true);\n        if (touches.length === 2) {\n          const distance = getDistance(touches);\n          const scale = startScale * distance / startDistance;\n          lastCenter = getCenter(touches);\n          setScale(scale, lastCenter);\n        }\n      }\n    };\n    const checkClose = (event) => {\n      var _a;\n      const swipeItemEl = (_a = swipeItem.value) == null ? void 0 : _a.$el;\n      const imageEl = swipeItemEl.firstElementChild;\n      const isClickOverlay = event.target === swipeItemEl;\n      const isClickImage = imageEl == null ? void 0 : imageEl.contains(event.target);\n      if (!props.closeOnClickImage && isClickImage)\n        return;\n      if (!props.closeOnClickOverlay && isClickOverlay)\n        return;\n      emit(\"close\");\n    };\n    const checkTap = (event) => {\n      if (fingerNum > 1) {\n        return;\n      }\n      const deltaTime = Date.now() - touchStartTime;\n      const TAP_TIME = 250;\n      if (touch.isTap.value) {\n        if (deltaTime < TAP_TIME) {\n          if (props.doubleScale) {\n            if (doubleTapTimer) {\n              clearTimeout(doubleTapTimer);\n              doubleTapTimer = null;\n              toggleScale();\n            } else {\n              doubleTapTimer = setTimeout(() => {\n                checkClose(event);\n                doubleTapTimer = null;\n              }, TAP_TIME);\n            }\n          } else {\n            checkClose(event);\n          }\n        } else if (deltaTime > LONG_PRESS_START_TIME) {\n          emit(\"longPress\");\n        }\n      }\n    };\n    const onTouchEnd = (event) => {\n      let stopPropagation = false;\n      if (state.moving || state.zooming) {\n        stopPropagation = true;\n        if (state.moving && startMoveX === state.moveX && startMoveY === state.moveY) {\n          stopPropagation = false;\n        }\n        if (!event.touches.length) {\n          if (state.zooming) {\n            state.moveX = clamp(state.moveX, -maxMoveX.value, maxMoveX.value);\n            state.moveY = clamp(state.moveY, -maxMoveY.value, maxMoveY.value);\n            state.zooming = false;\n          }\n          state.moving = false;\n          startMoveX = 0;\n          startMoveY = 0;\n          startScale = 1;\n          if (state.scale < 1) {\n            resetScale();\n          }\n          const maxZoom = +props.maxZoom;\n          if (state.scale > maxZoom) {\n            setScale(maxZoom, lastCenter);\n          }\n        }\n      }\n      preventDefault(event, stopPropagation);\n      checkTap(event);\n      touch.reset();\n    };\n    const resize = () => {\n      const {\n        rootWidth,\n        rootHeight\n      } = props;\n      const rootRatio = rootHeight / rootWidth;\n      const {\n        imageRatio\n      } = state;\n      vertical.value = state.imageRatio > rootRatio && imageRatio < longImageRatio;\n      isLongImage.value = state.imageRatio > rootRatio && imageRatio >= longImageRatio;\n      if (isLongImage.value) {\n        initialMoveY = (imageRatio * rootWidth - rootHeight) / 2;\n        state.moveY = initialMoveY;\n        state.initializing = true;\n        raf(() => {\n          state.initializing = false;\n        });\n      }\n      resetScale();\n    };\n    const onLoad = (event) => {\n      const {\n        naturalWidth,\n        naturalHeight\n      } = event.target;\n      state.imageRatio = naturalHeight / naturalWidth;\n      resize();\n    };\n    watch(() => props.active, resetScale);\n    watch(() => props.show, (value) => {\n      if (!value) {\n        resetScale();\n      }\n    });\n    watch(() => [props.rootWidth, props.rootHeight], resize);\n    useEventListener(\"touchmove\", onTouchMove, {\n      target: computed(() => {\n        var _a;\n        return (_a = swipeItem.value) == null ? void 0 : _a.$el;\n      })\n    });\n    useExpose({\n      resetScale\n    });\n    return () => {\n      const imageSlots = {\n        loading: () => _createVNode(Loading, {\n          \"type\": \"spinner\"\n        }, null)\n      };\n      return _createVNode(SwipeItem, {\n        \"ref\": swipeItem,\n        \"class\": bem(\"swipe-item\"),\n        \"onTouchstartPassive\": onTouchStart,\n        \"onTouchend\": onTouchEnd,\n        \"onTouchcancel\": onTouchEnd\n      }, {\n        default: () => [slots.image ? _createVNode(\"div\", {\n          \"class\": bem(\"image-wrap\")\n        }, [slots.image({\n          src: props.src\n        })]) : _createVNode(Image, {\n          \"ref\": imageRef,\n          \"src\": props.src,\n          \"fit\": \"contain\",\n          \"class\": bem(\"image\", {\n            vertical: vertical.value\n          }),\n          \"style\": imageStyle.value,\n          \"onLoad\": onLoad\n        }, imageSlots)]\n      });\n    };\n  }\n});\nexport {\n  stdin_default as default\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}